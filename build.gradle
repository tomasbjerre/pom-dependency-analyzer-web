apply plugin: 'java'

project.ext.tags = ['pom', 'maven', 'dependency', 'web', 'graph']
group = 'se.bjurr.pomanalyzerweb'
description = 'Uses output of pom-dependency-analyzer to create a webpage with graphs.'

apply plugin: 'application'
mainClassName = 'se.bjurr.pomdependencyanalyzerweb.main.Main'

buildscript {
 repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://jitpack.io" }
 }
 dependencies {
  classpath 'com.github.tomasbjerre:gradle-scripts:master-SNAPSHOT'
  classpath 'org.openapitools:openapi-generator-gradle-plugin:3.3.4'
 }
}
apply from: project.buildscript.classLoader.getResource('java.gradle').toURI()
apply from: project.buildscript.classLoader.getResource('changelog.gradle').toURI()
apply plugin: 'org.openapi.generator'

ext {
    slf4jVersion = '1.7.25'
    jettyVersion = '9.4.6.v20170531'
    jerseyVersion = '2.27'
}

dependencies {
 compile 'se.softhouse:jargo:0.1.1'

 compile 'io.swagger:swagger-annotations:1.5.3'

 compile "org.slf4j:slf4j-api:${slf4jVersion}"
 compile "org.slf4j:slf4j-simple:${slf4jVersion}"

 compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
 compile "org.eclipse.jetty:jetty-servlet:${jettyVersion}"

 compile "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"
 compile "org.glassfish.jersey.containers:jersey-container-servlet-core:${jerseyVersion}"
 compile "org.glassfish.jersey.containers:jersey-container-jetty-http:${jerseyVersion}"
 compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
 compile "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}"
 compile "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
 compile "org.glassfish.jersey.ext:jersey-proxy-client:${jerseyVersion}"

 testCompile 'junit:junit:4.12'
 testCompile 'org.assertj:assertj-core:3.12.2'
}

task mkdirs {
 doLast {
  mkdir "$rootDir/generated-java"
 }
}

openApiGenerate {
 generatorName = "jaxrs-spec"
 skipOverwrite = false
 inputSpec = "$rootDir/swagger.yml".toString()
 outputDir = "$rootDir/generated-java".toString()
 apiPackage = "se.bjurr.pomdependencyanalyzerweb.gen.api"
 modelPackage = "se.bjurr.pomdependencyanalyzerweb.gen.model"
 systemProperties = [
  interfaceOnly: "true"
 ]
}
tasks['openApiGenerate'].dependsOn 'mkdirs'

task copyGenerated {
 doLast {
  copy {
   from "$rootDir/generated-java/src/gen/java/se/bjurr/pomdependencyanalyzerweb/gen"
   into "src/main/java/se/bjurr/pomdependencyanalyzerweb/gen"
  }
 }
}

copyGenerated.dependsOn 'openApiGenerate'
compileJava.dependsOn 'copyGenerated'

task removeGenerated {
 delete "$rootDir/src/main/java/se/bjurr/pomdependencyanalyzerweb/gen"
 delete "$rootDir/generated-java"
}
clean.dependsOn 'removeGenerated'
